from datetime import time

import numpy as np
from preprocessing import load_pca
from ocr import load_model
import cv2 as cv
import matplotlib.pyplot as plt

classifier = load_model()

def preprocess(image):
       #flatten array
       image_arr = image.flatten()
       #PCA
       pca = load_pca()
       image_arr = pca.transform([image_arr])
       return image_arr

def classify(image, threshold=0.8):
       image = preprocess(image)
       predicted = classifier.predict_proba(image)
       pred_index = predicted.argmax()
       pred_val = predicted[0][pred_index]
       if(pred_val >= threshold):
              return (pred_index, pred_val)
       else:
              return -1

def load_image():
       image = cv.imread('./detection-images/detection-1.jpg',0)
       pixels = np.array(image)
       pixels = np.divide(pixels, 255)
       return pixels

#image = load_image()


# def sliding_window(image, stepSize, windowSize):
#        tmp = image  # for drawing a rectangle
#        #stepSize = 50
#        #(w_width, w_height) = (20, 20)  # window size
#        for y in range(0, image.shape[1]-windowSize[1], stepSize):
#               for x in range(0, image.shape[0]-windowSize[0], stepSize):
#                      window = image[y:y + windowSize[1], x:x + windowSize[0]]
#                      plt.imshow(window, cmap="gray")
#                      plt.show()
#                      #pred = classify(window)
#                      #print(pred)
#                      # classify content of the window with your classifier and
#                      # determine if the window includes an object (cell) or not
#
#                      # draw window on image
#                      #cv.rectangle(tmp, (y, x), (y + image.shape[1], x + image.shape[0]), (255, 0, 0), 2)  # draw rectangle on image
#                      #plt.imshow(np.array(tmp).astype('uint8'))
#        # show all windows
#        plt.show()

def sliding_window(image, stepSize, windowSize):
       # slide a window across the image
       for x in range(0, image.shape[0] - windowSize[0], stepSize):
              for y in range(0, image.shape[1] - windowSize[1], stepSize):
                     # yield the current window
                     yield (x, y, image[x:x + windowSize[0], y:y + windowSize[1]])


image = load_image()
windowSize = (20,20)
for (x,y, window) in sliding_window(image, stepSize=20, windowSize=windowSize):
       if window.shape[0] != windowSize[0] or window.shape[1] != windowSize[1]:
              continue
       plt.imshow(window,cmap="gray")
       plt.show()

def test1():
       pca = load_pca()
       X_test = np.array([0.0627451 , 0.00784314, 0.03137255, 0.05098039, 0.00392157,
       0.01960784, 0.0627451 , 0.03529412, 0.02352941, 0.03529412,
       0.04705882, 0.07058824, 0.00392157, 0.        , 0.05882353,
       0.02745098, 0.01960784, 0.02352941, 0.02745098, 0.03529412,
       0.0627451 , 0.04705882, 0.09803922, 0.10196078, 0.04313725,
       0.07058824, 0.11764706, 0.08627451, 0.08627451, 0.10196078,
       0.        , 0.00392157, 0.0627451 , 0.03529412, 0.02352941,
       0.01176471, 0.04313725, 0.04705882, 0.05098039, 0.05490196,
       0.1254902 , 0.09019608, 0.0745098 , 0.04705882, 0.09803922,
       0.38823529, 0.72941176, 0.86666667, 0.83921569, 0.69411765,
       0.2745098 , 0.05882353, 0.10980392, 0.07058824, 0.02352941,
       0.05490196, 0.05098039, 0.05490196, 0.05490196, 0.05882353,
       0.09019608, 0.10588235, 0.12156863, 0.0745098 , 0.11372549,
       0.42352941, 0.78039216, 0.9254902 , 0.94509804, 0.72156863,
       0.25490196, 0.02352941, 0.0627451 , 0.0745098 , 0.08627451,
       0.10588235, 0.0627451 , 0.06666667, 0.06666667, 0.07058824,
       0.09019608, 0.11764706, 0.1254902 , 0.04705882, 0.05882353,
       0.37647059, 0.76862745, 0.9372549 , 0.89411765, 0.65882353,
       0.3254902 , 0.15686275, 0.10196078, 0.10588235, 0.14509804,
       0.0745098 , 0.09019608, 0.09411765, 0.09411765, 0.09411765,
       0.30588235, 0.50980392, 0.76470588, 0.82745098, 0.76078431,
       0.80392157, 0.87843137, 0.83921569, 0.90980392, 0.77647059,
       0.64313725, 0.60392157, 0.52156863, 0.45882353, 0.41568627,
       0.25490196, 0.09019608, 0.09411765, 0.09803922, 0.09803922,
       0.31764706, 0.54117647, 0.84705882, 0.96470588, 0.91372549,
       0.9372549 , 0.99215686, 0.96078431, 0.94901961, 0.9372549 ,
       0.8745098 , 0.9372549 , 1.        , 0.95294118, 0.8745098 ,
       0.75294118, 0.08235294, 0.08627451, 0.09019608, 0.09411765,
       0.03529412, 0.07058824, 0.12941176, 0.10980392, 0.10196078,
       0.35294118, 0.72156863, 0.92156863, 0.88627451, 0.72156863,
       0.28627451, 0.05490196, 0.09019608, 0.07058824, 0.0627451 ,
       0.10588235, 0.09411765, 0.09803922, 0.10196078, 0.10980392,
       0.06666667, 0.02352941, 0.05098039, 0.03529412, 0.10588235,
       0.34509804, 0.81568627, 0.96078431, 0.91372549, 0.69019608,
       0.24705882, 0.11372549, 0.10196078, 0.11764706, 0.07843137,
       0.09411765, 0.08235294, 0.09411765, 0.10196078, 0.09803922,
       0.08627451, 0.05490196, 0.08627451, 0.05882353, 0.10588235,
       0.32156863, 0.77254902, 0.90196078, 0.90980392, 0.69803922,
       0.25098039, 0.09803922, 0.05882353, 0.07843137, 0.08235294,
       0.1372549 , 0.10196078, 0.11372549, 0.11764706, 0.11764706,
       0.08235294, 0.05882353, 0.09019608, 0.05882353, 0.09803922,
       0.32156863, 0.78431373, 0.92156863, 0.94117647, 0.67058824,
       0.18431373, 0.06666667, 0.10196078, 0.14117647, 0.0745098 ,
       0.05490196, 0.06666667, 0.07843137, 0.09411765, 0.11372549,
       0.09411765, 0.0745098 , 0.09411765, 0.04705882, 0.09019608,
       0.33333333, 0.81568627, 0.96078431, 0.9372549 , 0.69803922,
       0.23137255, 0.08235294, 0.06666667, 0.09019608, 0.07058824,
       0.09803922, 0.09803922, 0.09411765, 0.10980392, 0.1372549 ,
       0.10196078, 0.09019608, 0.11764706, 0.06666667, 0.10980392,
       0.35294118, 0.81568627, 0.94117647, 1.        , 0.74901961,
       0.22745098, 0.0627451 , 0.06666667, 0.11764706, 0.10196078,
       0.12941176, 0.10980392, 0.09019608, 0.08627451, 0.10196078,
       0.03921569, 0.04705882, 0.10196078, 0.07843137, 0.14509804,
       0.39215686, 0.83529412, 0.92941176, 0.91372549, 0.69411765,
       0.24313725, 0.09803922, 0.0627451 , 0.06666667, 0.03137255,
       0.05098039, 0.09019608, 0.06666667, 0.07058824, 0.10980392,
       0.        , 0.        , 0.05098039, 0.03921569, 0.13333333,
       0.40784314, 0.85098039, 0.94117647, 0.88235294, 0.82352941,
       0.52156863, 0.35294118, 0.17647059, 0.09803922, 0.1254902 ,
       0.25490196, 0.11764706, 0.10196078, 0.13333333, 0.21176471,
       0.03921569, 0.01176471, 0.02352941, 0.        , 0.07843137,
       0.37254902, 0.83529412, 0.9254902 , 0.91372549, 0.68627451,
       0.23529412, 0.09803922, 0.08627451, 0.10196078, 0.05882353,
       0.0745098 , 0.08627451, 0.07843137, 0.1254902 , 0.21568627,
       0.02745098, 0.        , 0.04705882, 0.00784314, 0.        ,
       0.34901961, 0.79607843, 0.92156863, 0.91764706, 0.68235294,
       0.21960784, 0.07843137, 0.08627451, 0.06666667, 0.1372549 ,
       0.05098039, 0.09803922, 0.09411765, 0.09019608, 0.09019608,
       0.05490196, 0.02352941, 0.01960784, 0.02745098, 0.04705882,
       0.22745098, 0.63529412, 1.        , 0.86666667, 0.94509804,
       0.71764706, 0.41568627, 0.25882353, 0.47843137, 0.79607843,
       0.68627451, 0.11764706, 0.11372549, 0.11372549, 0.10980392,
       0.        , 0.02745098, 0.        , 0.        , 0.03921569,
       0.00784314, 0.18431373, 0.57254902, 0.90196078, 0.95294118,
       0.94509804, 0.9254902 , 0.85098039, 0.9372549 , 0.98431373,
       0.65490196, 0.08627451, 0.08627451, 0.08627451, 0.08627451,
       0.        , 0.06666667, 0.01960784, 0.        , 0.04705882,
       0.        , 0.        , 0.09411765, 0.09019608, 0.01960784,
       0.        , 0.05490196, 0.04313725, 0.02745098, 0.0745098 ,
       0.        , 0.03529412, 0.03529412, 0.03921569, 0.03921569])

       preprocessed = preprocess((X_test))
       predicted = classify(preprocessed)
       print("Predicted value:")
       print(predicted)

       return predicted
#test1()